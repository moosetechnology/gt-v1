Class {
	#name : #GTSpotterMorph,
	#superclass : #GLMFoundationBrick,
	#instVars : [
		'focusedMorph',
		'breadcrumbBrick',
		'paneBrick',
		'spotterModel',
		'autoHide',
		'privacyAgreementNotificationBrick'
	],
	#category : #'GT-Spotter-UI'
}

{ #category : #actions }
GTSpotterMorph >> actDueTo: anEventType [
	self spotterModelDo: [
		self spotterModel isEmpty ifTrue: [ ^self ].
		self spotterModel currentStep isEmpty ifTrue: [ ^ self ].
		self spotterModel currentStep actDueTo: anEventType ]
]

{ #category : #accessing }
GTSpotterMorph >> autoHide [

	^ autoHide ifNil: [ autoHide := true ]
]

{ #category : #accessing }
GTSpotterMorph >> autoHide: aBoolean [

	autoHide := aBoolean
]

{ #category : #initialization }
GTSpotterMorph >> bindingDictionnary [
	^ {Character escape -> [ self spotterModel exitDueTo: #keyPressedEscape ].
	$w command -> [ self spotterModel exitDueTo: #keyPressedW ].
	$p command -> [ self togglePreview ].
	Character arrowUp -> [ self selectPreviousCandidateDueTo: #keyPressedArrowUp ].
	Character arrowDown -> [ self selectNextCandidateDueTo: #keyPressedArrowDown ].
	Character arrowUp command -> [ self selectPreviousCandidateDueTo: #keyPressedArrowUp ].
	Character arrowDown command -> [ self selectNextCandidateDueTo: #keyPressedArrowDown ].
	Character arrowUp shift -> [ self selectPreviousCandidateDueTo: #keyPressedArrowUp ].
	Character arrowDown shift -> [ self selectNextCandidateDueTo: #keyPressedArrowDown ].
	Character arrowUp command shift -> [ self selectPreviousCategory ].
	Character arrowDown command shift -> [ self selectNextCategory ].
	Character arrowRight command -> [ self diveInDueTo: #keyPressed ].
	Character arrowLeft command -> [ self diveOut ].
	Character arrowRight command shift -> [ self diveInCategoryDueTo: #keyPressed ].
	Character arrowLeft command shift -> [ self diveOut ].
	Character arrowUp alt -> [ self stepScrollPageUp ].
	Character arrowDown alt -> [ self stepScrollPageDown ].
	Character pageUp -> [ self stepScrollPageUp ].
	Character pageDown -> [ self stepScrollPageDown ].
	Character cr asKeyCombination -> [ self actDueTo: #keyPressed ].
	$p command shift -> [ self exportAsPNGSilently ]}
]

{ #category : #accessing }
GTSpotterMorph >> breadcrumbBrick [
	
	^ breadcrumbBrick
]

{ #category : #accessing }
GTSpotterMorph >> breadcrumbBrick: aBrick [

	breadcrumbBrick ifNotNil: [self removeBrick: breadcrumbBrick].
	breadcrumbBrick := aBrick.
	
	breadcrumbBrick announcer weak when: GTSpotterBreadcrumbVisibilityChanged send: #onBreadcrumbVisibilityChanged to: self.
	self themer spotterThemer breadcrumbStyleFor: breadcrumbBrick.
	breadcrumbBrick width: [ self paneBrick contentsBrick width ].
	breadcrumbBrick layout widthDependency: [ self paneBrick contentsBrick ].
	self addBrickBack: breadcrumbBrick
]

{ #category : #actions }
GTSpotterMorph >> closeSpotter [

	self autoHide ifTrue: [ self delete ]
]

{ #category : #'accessing-defaults' }
GTSpotterMorph >> defaultLabel [
	^ 'Spotter'
]

{ #category : #actions }
GTSpotterMorph >> diveInCategoryDueTo: anEventType [

	self spotterModelDo: [
		self spotterModel isEmpty
			ifFalse: [ self spotterModel currentStep isEmpty 
				ifFalse: [ self spotterModel currentStep diveInCategoryDueTo: anEventType ] ] ]
]

{ #category : #actions }
GTSpotterMorph >> diveInDueTo: anEventType [

	self spotterModelDo: [
		self spotterModel isEmpty ifFalse: [ 
			self spotterModel currentStep isEmpty ifFalse: [ 
				self spotterModel currentStep diveInDueTo: anEventType ] ] ]
]

{ #category : #actions }
GTSpotterMorph >> diveOut [
	self spotterModelDo: [ 
		self spotterModel popStep ]
]

{ #category : #'events-processing' }
GTSpotterMorph >> handleListenEvent: anEvent [
		
	anEvent type = #mouseDown ifTrue: [ 
		((self fullBoundsInWorld containsPoint: anEvent position) not and: [ self autoHide ])
			ifTrue: [ self spotterModel ifNotNil: [ :aModel | aModel exitDueTo: #mouseDown ] ] ].
		
	anEvent type = #keyDown ifTrue: [ 
		self spotterModel
			ifNotNil: [ :s | s shiftPressed: (InputEventSensor default anyModifierKeyPressed not & InputEventSensor default shiftPressed) ] ].
]

{ #category : #'event handling' }
GTSpotterMorph >> handlesMouseDown: evt [
	^ true
]

{ #category : #actions }
GTSpotterMorph >> hidePreview [
	
	self spotterModel hidePreview
]

{ #category : #initialization }
GTSpotterMorph >> initialize [
	super initialize.
	"setting custom brick themer for the whole spotter"
	self themer: self themer spotterThemer themer.
	
	self initializeListeners.
	self themer spotterThemer spotterStyleFor: self.
	
	self breadcrumbBrick: self newBreadcrumbBrick.
	self paneBrick: self newPaneBrick.
	#GTSpotterEventCollector asClassIfPresent: [ 
		GTSpotter wasOpened ifFalse: [ self privacyAgreementNotificationBrick: self newPrivacyAgreementNotificationBrick ] ].
	
	
	
]

{ #category : #initialization }
GTSpotterMorph >> initializeListeners [
	self activeHand addEventListener: self.
	Morph announcer weak when: MorphLostFocus send: #onLostFocus: to: self.
	self bindingDictionnary
		associationsDo: [ :anAssociation | self bindKeyCombination: anAssociation key toAction: anAssociation value ]
]

{ #category : #'instance creation' }
GTSpotterMorph >> newBreadcrumbBrick [

	^ GTSpotterStepsBreadcrumb new
]

{ #category : #'instance creation' }
GTSpotterMorph >> newPaneBrick [

	^ GTSpotterPaneBrick new
]

{ #category : #'instance creation' }
GTSpotterMorph >> newPrivacyAgreementNotificationBrick [

	^ GTSpotterPrivacyAgreementNotificationBrick new
]

{ #category : #'events-processing' }
GTSpotterMorph >> onBreadcrumbVisibilityChanged [

	self changed.
]

{ #category : #'events-processing' }
GTSpotterMorph >> onHidePreview [
	|delta|
	self paneBrick isPreviewShown ifFalse: [ ^ self ].
	delta := ((self width - ((self width / 100) * (100 - self themer spotterThemer previewWidthPercent)))@0) negated / 2.
	self bounds: (self bounds expandBy: delta rounded).
	self paneBrick hidePreview.
	self doLayout
]

{ #category : #'events-processing' }
GTSpotterMorph >> onLostFocus: event [

	focusedMorph ifNil: [ focusedMorph := event morph ]
]

{ #category : #'events-processing' }
GTSpotterMorph >> onShowPreview [

	|delta|
	self paneBrick isPreviewShown ifTrue: [ ^ self ].
	delta := (((self width * 100) / (100 - self themer spotterThemer previewWidthPercent) - self width)@0) / 2.
	self bounds: (self bounds expandBy: delta rounded).
	self paneBrick showPreview.
	self doLayout
]

{ #category : #opening }
GTSpotterMorph >> openInWindowLabeled: aString inWorld: aWorld [
	self autoHide: false.
	^ super openInWindowLabeled: aString inWorld: aWorld
]

{ #category : #initialization }
GTSpotterMorph >> outOfWorld: aWorld [
	super outOfWorld: aWorld.
	self unsubscribeListeners.
	
	self spotterModel ifNotNil: [:m | m terminateProcessors].
	
	"restoring previous focus"
	focusedMorph ifNotNil: [ focusedMorph takeKeyboardFocus ]
]

{ #category : #accessing }
GTSpotterMorph >> paneBrick [

	^ paneBrick
]

{ #category : #accessing }
GTSpotterMorph >> paneBrick: aBrick [
	
	paneBrick ifNotNil: [self removeBrick: paneBrick].
	paneBrick := aBrick.
		
	self themer spotterThemer spotterPaneStyleFor: paneBrick.

	self addBrickBack: paneBrick
]

{ #category : #accessing }
GTSpotterMorph >> privacyAgreementNotificationBrick [
	^ privacyAgreementNotificationBrick
]

{ #category : #accessing }
GTSpotterMorph >> privacyAgreementNotificationBrick: aBrick [
	
	privacyAgreementNotificationBrick ifNotNil: [self removeBrick: privacyAgreementNotificationBrick].
	privacyAgreementNotificationBrick := aBrick.
	
	self themer spotterThemer privacyAgreementNotificationStyleFor: privacyAgreementNotificationBrick.
	privacyAgreementNotificationBrick layout widthDependency: self.
	privacyAgreementNotificationBrick width: [ self width - (self paneBrick isPreviewShown 
			ifFalse: [self themer spotterThemer previewArrowWidth - (2*self themer spotterThemer previewBorderWidth)] 
			ifTrue: [0])].
	
	self addBrickBack: privacyAgreementNotificationBrick
]

{ #category : #actions }
GTSpotterMorph >> selectNextCandidateDueTo: anEventType [

	self spotterModel isEmpty
		ifFalse: [ self spotterModel currentStep selectNextDueTo: anEventType ]
	
]

{ #category : #actions }
GTSpotterMorph >> selectNextCategory [

	self spotterModel isEmpty
		ifFalse: [ self spotterModel currentStep selectNextCategory ]
	
]

{ #category : #actions }
GTSpotterMorph >> selectPreviousCandidateDueTo: anEventType [

	self spotterModel isEmpty
		ifFalse: [ self spotterModel currentStep selectPreviousDueTo: anEventType ]
	
]

{ #category : #actions }
GTSpotterMorph >> selectPreviousCategory [

	self spotterModel isEmpty
		ifFalse: [ self spotterModel currentStep selectPreviousCategory ]
	
]

{ #category : #actions }
GTSpotterMorph >> showPreview [
	
	self spotterModel showPreview
]

{ #category : #accessing }
GTSpotterMorph >> spotterModel [

	^ spotterModel
]

{ #category : #accessing }
GTSpotterMorph >> spotterModel: aSpotter [

	spotterModel := aSpotter.
	
	spotterModel announcer weak when: GTSpotterExitAnnouncement send: #closeSpotter to: self.
	spotterModel announcer weak when: GTSpotterShowPreview send: #onShowPreview to: self.
	spotterModel announcer weak when: GTSpotterHidePreview send: #onHidePreview to: self.
	
	self breadcrumbBrick spotterModel: spotterModel.
	self paneBrick spotterModel: spotterModel.
	
	spotterModel class isPreviewVisible ifTrue: [ spotterModel showPreview ].
	
	"expanding drop down pane"
	self spotterModel setText: '' from: nil.
	self spotterModel currentStep process: nil.
	
	
	
]

{ #category : #private }
GTSpotterMorph >> spotterModelDo: aBlock [
	self spotterModel handleExceptionsDuring: aBlock
]

{ #category : #actions }
GTSpotterMorph >> stepScrollPageDown [

	self spotterModel currentStep announcer announce: (GTSpotterScrollPageDown new)
]

{ #category : #actions }
GTSpotterMorph >> stepScrollPageUp [

	self spotterModel currentStep announcer announce: (GTSpotterScrollPageUp new)
]

{ #category : #actions }
GTSpotterMorph >> togglePreview [

	self spotterModel togglePreview
]

{ #category : #initialization }
GTSpotterMorph >> unsubscribeListeners [

	self activeHand removeEventListener: self.
	Morph announcer unsubscribe: self.
]
