"
This is a themer for all spotter morphs.

To customize it, it has to be subclassed and pointed to from:
ACustomTheme>>spotterWidgetThemer
"
Class {
	#name : #GTSpotterWidgetThemer,
	#superclass : #Object,
	#category : #'GT-Spotter-Theme'
}

{ #category : #values }
GTSpotterWidgetThemer >> backgroundColor [
	"used as background color for all panes"
	^ Color white
]

{ #category : #values }
GTSpotterWidgetThemer >> borderColor [
	"color that is used for border and dividers of UI parts of Spotter
	for example divider between header and results or between preview and list"
	^ Color r: 180 g: 180 b: 180 range: 255
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbHeight [

	^ 26
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbItemBackgroundColor [

	^ self borderColor
]

{ #category : #styles }
GTSpotterWidgetThemer >> breadcrumbItemLabelStyleFor: aBrick [

	aBrick
		textPosition: #center;
		normalColor: self breadcrumbItemBackgroundColor;
		textColor: self breadcrumbItemTextColor;
		padding: { 0 . self outerBorderWidth }.
		
	aBrick layout vSpaceFill
]

{ #category : #styles }
GTSpotterWidgetThemer >> breadcrumbItemStyleFor: aBrick [
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbItemTextColor [

	^ Color white
]

{ #category : #styles }
GTSpotterWidgetThemer >> breadcrumbItemTriangleStyleFor: aBrick [

	aBrick renderer: (GTSpotterTriangleRenderer new orientation: #bottom).
	aBrick layout staticHeight: self breadcrumbTriangleHeight.
	aBrick color: self breadcrumbItemBackgroundColor
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbSeparatorColor [

	^ self breadcrumbItemBackgroundColor muchLighter slightlyDarker
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbSeparatorLineWidth [

	^ 2
]

{ #category : #styles }
GTSpotterWidgetThemer >> breadcrumbSeparatorStyleFor: aBrick [

	aBrick
		color: self breadcrumbItemBackgroundColor;
		borderWidth: self breadcrumbSeparatorLineWidth;
		borderColor: self breadcrumbSeparatorColor;
		renderer: GTSpotterBreadcrumbSeparatorRenderer new;
		width: self breadcrumbSeparatorWidth;
		height: self breadcrumbHeight + self outerBorderWidth.
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbSeparatorWidth [

	^ (self breadcrumbHeight + self outerBorderWidth) / 2 + 4 "we need slightly more because of drawing accuracy"
]

{ #category : #styles }
GTSpotterWidgetThemer >> breadcrumbStyleFor: aBrick [
	
	aBrick layout
		margin: { 0 . 0 }.
		
	aBrick layout
		staticHeight: self breadcrumbHeight;
		marginBottom: self breadcrumbTriangleHeight negated;
		zIndex: 2.
]

{ #category : #values }
GTSpotterWidgetThemer >> breadcrumbTriangleHeight [

	^ 16
]

{ #category : #acessing }
GTSpotterWidgetThemer >> brickThemer [

	^ GTSpotterBrickThemer default
]

{ #category : #values }
GTSpotterWidgetThemer >> buttonPressedColor [

	^ self backgroundColor darker
]

{ #category : #styles }
GTSpotterWidgetThemer >> categoryAmountStyleFor: aBrick [

	aBrick
		textPosition: #leftCenter;
		textColor: self titleTextColor;
		color: self titleBackgroundColor.
	
	aBrick label
		fontSize: self titleFontSize;
		familyName: self titleFamilyName.
	
	aBrick layoutProperties
		hSpaceFill;
		marginLeft: self categoryNameMarginRight.
]

{ #category : #values }
GTSpotterWidgetThemer >> categoryMarginBottom [

	^ (self itemHeight * (2/3)) ceiling "pixels"
]

{ #category : #values }
GTSpotterWidgetThemer >> categoryNameMarginLeft [

	^ self itemIconMaxWidth
]

{ #category : #values }
GTSpotterWidgetThemer >> categoryNameMarginRight [

	^ 10
]

{ #category : #styles }
GTSpotterWidgetThemer >> categoryStyleFor: aBrick [

	aBrick layoutProperties
		marginBottom: self categoryMarginBottom
]

{ #category : #values }
GTSpotterWidgetThemer >> categoryTitleBackgroundColor [

	^ Color white alpha: 0.95
]

{ #category : #styles }
GTSpotterWidgetThemer >> categoryTitleNameStyleFor: aBrick [

	aBrick
		textPosition: #leftCenter;
		textColor: self titleTextColor;
		color: self titleBackgroundColor.
	
	aBrick label
		fontSize: self titleFontSize;
		familyName: self titleFamilyName.
	
	aBrick layoutProperties
		staticWidth: [ :name | (aBrick owner innerBounds width) min: ((name label textSize x) + name label layoutProperties horizontalMargin) ].
]

{ #category : #styles }
GTSpotterWidgetThemer >> categoryTitleStyleFor: aBrick [

	aBrick
		layoutPolicy: GLMBrickHorizontalFillProportionalLinearLayout new;
		normalColor: self categoryTitleBackgroundColor;
		height: [ 30 ].
	
	aBrick layoutProperties
		floating: #stack;
		paddingLeft: self categoryNameMarginLeft;
		maxWidthBlock: [ :title |
			aBrick layoutProperties horizontalPadding + 
			(title nameBrick label textSize x )+ title amountBrick label textSize x +
			title nameBrick layoutProperties horizontalPadding + title nameBrick layoutProperties horizontalMargin + 
			title nameBrick label layoutProperties horizontalPadding + title nameBrick label layoutProperties horizontalMargin + 
			title amountBrick layoutProperties horizontalMargin ].
]

{ #category : #styles }
GTSpotterWidgetThemer >> closeButtonStyleFor: aBrick [

	aBrick
		normalImage: GLMUIThemeExtraIcons glamorousClose;
		pressedColor: self buttonPressedColor
]

{ #category : #styles }
GTSpotterWidgetThemer >> dropDownPaneStyleFor: aBrick [

	aBrick
		layoutProperties: GLMBrickLayoutProperties new;
		color: self backgroundColor.

	aBrick layoutProperties
		vSpaceFill;
		marginTop: self innerBorderWidth.
]

{ #category : #values }
GTSpotterWidgetThemer >> headerHeight [
	"height of the header where user enters search request"
	^ 56
]

{ #category : #styles }
GTSpotterWidgetThemer >> headerStyleFor: aBrick [

	aBrick
		color: self backgroundColor.
		
	aBrick layout
		staticHeight: [ self headerHeight ]
]

{ #category : #icons }
GTSpotterWidgetThemer >> iconAct [

	^ GLMUIThemeExtraIcons glamorousPlay
]

{ #category : #icons }
GTSpotterWidgetThemer >> iconDiveIn [

	^ GLMUIThemeExtraIcons glamorousRight
]

{ #category : #values }
GTSpotterWidgetThemer >> innerBorderWidth [
	"width of the border that separates panes in the spotter"
	^ 1
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemActionButtonStyleFor: aBrick [

	aBrick
		width: [ aBrick normalImage width + aBrick layoutProperties horizontalPadding ];
		pressedColor: self itemActionSelectedBackgroundColor;
		padding: { 0 . self outerBorderWidth }
]

{ #category : #values }
GTSpotterWidgetThemer >> itemActionSelectedBackgroundColor [

	^ self itemSelectedBackgroundColor darker
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemActionbarInvisibleStyleFor: aBrick [

	aBrick layoutProperties staticWidth: 0.
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemActionbarStyleFor: aBrick [

	aBrick layoutPolicy: GLMBrickHorizontalFillLinearLayout new.
	
	aBrick layoutProperties
		marginRight: self outerBorderWidth.
	
	self itemActionbarInvisibleStyleFor: aBrick.
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemActionbarVisibleStyleFor: aBrick [

	aBrick layoutProperties
		staticWidth: [ :actionbar | actionbar subbricks inject: (actionbar layoutProperties horizontalPadding + actionbar layoutProperties horizontalMargin) into: [ :width :each | width + each outerBounds width ] ].
]

{ #category : #values }
GTSpotterWidgetThemer >> itemFamilyName [

	^ 'Open Sans'
]

{ #category : #values }
GTSpotterWidgetThemer >> itemFontSize [

	^ 9
]

{ #category : #values }
GTSpotterWidgetThemer >> itemHeight [

	^ 30
]

{ #category : #values }
GTSpotterWidgetThemer >> itemHoveredBackgroundColor [

	^ Color transparent
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemHoveredStyleFor: aBrick [

	aBrick color: self itemHoveredBackgroundColor
]

{ #category : #values }
GTSpotterWidgetThemer >> itemIconAlphaValue [

	^ 0.8
]

{ #category : #values }
GTSpotterWidgetThemer >> itemIconMaxWidth [

	^ 50
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemIconStyleFor: aBrick [
	"icon form must already be set before styling"
	
	"making icon a bit transparent"
	aBrick normalImage: (aBrick normalImage asAlphaImageMorph alpha: self itemIconAlphaValue) cachedForm.
	
	aBrick layoutProperties
		marginLeft: self titleMarginLeft;
		"margin right depends on maximal icon width and on image form width"
		marginRight: (self itemIconMaxWidth - aBrick normalImage width - aBrick layoutProperties marginLeft);
		staticWidth: (aBrick normalImage width + aBrick layoutProperties horizontalMargin).
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemLabelStyleFor: aBrick [

	aBrick label
		familyName: self itemFamilyName;
		fontSize: self itemFontSize;
		textColor: self itemTextColor;
		highlightingLogic: [ :aCanvas :aRectangle | |bounds|
			"because font calculates text width wrong"
			bounds := aRectangle translateBy: (-3@0).
			aCanvas line: bounds bottomLeft to: bounds bottomRight width: 1 color: Color lightGray ].
	
	aBrick layoutProperties
		hSpaceFill;
		marginRight: self outerBorderWidth.
]

{ #category : #values }
GTSpotterWidgetThemer >> itemNormalBackgroundColor [

	^ Color transparent
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemNormalStyleFor: aBrick [

	aBrick
		normalColor: self itemNormalBackgroundColor;
		selectedColor: self itemHoveredBackgroundColor;
		checkedColor: self itemSelectedBackgroundColor;
		height: [ self itemHeight ]
]

{ #category : #values }
GTSpotterWidgetThemer >> itemSelectedBackgroundColor [

	^ self backgroundColor darker
]

{ #category : #styles }
GTSpotterWidgetThemer >> itemSelectedStyleFor: aBrick [

	aBrick color: self itemSelectedBackgroundColor
]

{ #category : #values }
GTSpotterWidgetThemer >> itemTextColor [

	^ Color black
]

{ #category : #values }
GTSpotterWidgetThemer >> outerBorderWidth [
	"the width of the border around the whole spotter"
	^ 4
]

{ #category : #values }
GTSpotterWidgetThemer >> previewArrowColor [

	^ self itemSelectedBackgroundColor
]

{ #category : #values }
GTSpotterWidgetThemer >> previewArrowGapHack [

	^ self brickThemer scrollbarOffset + self brickThemer scrollbarWidth + self outerBorderWidth + 1"pager bug"
]

{ #category : #values }
GTSpotterWidgetThemer >> previewArrowWidth [

	^ (self itemHeight / 2) + self previewArrowGapHack
]

{ #category : #values }
GTSpotterWidgetThemer >> previewBorderWidth [

	^ self outerBorderWidth
]

{ #category : #values }
GTSpotterWidgetThemer >> previewWidthPercent [

	^ 40
]

{ #category : #styles }
GTSpotterWidgetThemer >> resultsPaneStyleFor: aBrick [

	aBrick band layoutPolicy: GLMBrickVerticalLinedStackLayout new.
	aBrick layoutProperties horizontalPercent: self resultsPaneWidth.
	aBrick color: self backgroundColor.
]

{ #category : #values }
GTSpotterWidgetThemer >> resultsPaneWidth [
	"width in Percents of the results pane"
	^ 100"%"
]

{ #category : #values }
GTSpotterWidgetThemer >> searchFieldCursorColor [

	^ Color black
]

{ #category : #values }
GTSpotterWidgetThemer >> searchFieldFamilyName [

	^ 'Source Sans Pro'
]

{ #category : #values }
GTSpotterWidgetThemer >> searchFieldFontSize [

	^ 15
]

{ #category : #values }
GTSpotterWidgetThemer >> searchFieldMarginLeft [

	^ 20
]

{ #category : #styles }
GTSpotterWidgetThemer >> searchFieldStyleFor: aMorph [

	aMorph
		layoutProperties: GLMBrickLayoutProperties new;
		hResizing: #spaceFill;
		vResizing: #spaceFill;
		color: Color transparent;
		textColor: self searchFieldTextColor;
		withoutAdornment;
		withGhostText: self spotterGhostText;
		autoAccept: true;
		borderColor: Color transparent.
		
	aMorph layoutProperties
		hSpaceFill;
		marginLeft: self searchFieldMarginLeft.
	
	aMorph ghostTextRuler
		fontName: self searchFieldFamilyName pointSize: self searchFieldFontSize.
		
	aMorph textArea
		font: (LogicalFont familyName: self searchFieldFamilyName pointSize: self searchFieldFontSize);
		backgroundColor: Color transparent.
		
	aMorph textArea cursor color: self searchFieldCursorColor
]

{ #category : #values }
GTSpotterWidgetThemer >> searchFieldTextColor [
	
	^ Color black
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterContentsStyleFor: aBrick [
	
	aBrick
		layout: GLMBrickVerticalFillProportionalLinearLayout new;
		borderColor: self borderColor;
		borderWidth: self outerBorderWidth;
		color: self borderColor.
	
	aBrick layout
		hSpaceFill;
		padding: self outerBorderWidth;
		zIndex: 2
	
]

{ #category : #values }
GTSpotterWidgetThemer >> spotterGhostText [

	^ 'Spotter search'
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterPaneStyleFor: aBrick [
	
	aBrick layout: GLMBrickHorizontalFillProportionalLinearLayout new.
	aBrick layout
		hSpaceFill;
		vSpaceFill
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterPreviewArrowContainerStyleFor: aBrick [

	aBrick layout: GLMBrickVerticalScrollListLayout new;
		margin: {
			self headerHeight + self innerBorderWidth + self previewBorderWidth.
			0.
			self previewBorderWidth.
			self previewArrowGapHack negated }.
		
	aBrick layout
		staticWidth: self previewArrowWidth - self previewArrowGapHack;
		zIndex: 4.
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterPreviewArrowStyleFor: aBrick [

	aBrick
		renderer: (GTSpotterTriangleRenderer new orientation: #right);
		height: [ (self previewArrowWidth - self previewArrowGapHack ) * 2 ]
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterPreviewCompositeStyleFor: aBrick [

	aBrick layout
		hSpaceFill;
		margin: self previewBorderWidth
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterPreviewStyleFor: aBrick [
	
	aBrick
		borderColor: self borderColor;
		borderWidth: self previewBorderWidth;
		color: Color white.
	
	aBrick layout
		hPercent: self previewWidthPercent;
		margin: { self headerHeight + self innerBorderWidth. 0 . 0};
		marginLeft: (self previewBorderWidth + self previewArrowWidth) negated;
		zIndex: 1
]

{ #category : #styles }
GTSpotterWidgetThemer >> spotterStyleFor: aBrick [

	aBrick brickRoot layout: GLMBrickVerticalFillProportionalLinearLayout new
]

{ #category : #values }
GTSpotterWidgetThemer >> titleBackgroundColor [

	^ Color transparent
]

{ #category : #values }
GTSpotterWidgetThemer >> titleFamilyName [
	^ 'Open Sans'.
]

{ #category : #values }
GTSpotterWidgetThemer >> titleFontSize [

	^ 9
]

{ #category : #values }
GTSpotterWidgetThemer >> titleMarginLeft [
	^ 20
]

{ #category : #values }
GTSpotterWidgetThemer >> titleTextColor [

	^ self titleBackgroundColor muchDarker
]
