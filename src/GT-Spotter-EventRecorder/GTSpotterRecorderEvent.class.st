"
GTSpotterRecorderEvent is the root class for representing usage data generated by Spotter. 
All events have a timestamp.
"
Class {
	#name : #GTSpotterRecorderEvent,
	#superclass : #Object,
	#instVars : [
		'timestamp',
		'info'
	],
	#category : #'GT-Spotter-EventRecorder-Events'
}

{ #category : #'instance creation' }
GTSpotterRecorderEvent class >> fromAnnouncement: anAnnouncement [

	^ self new fromAnnouncement: anAnnouncement
]

{ #category : #initialization }
GTSpotterRecorderEvent >> fromAnnouncement: anAnnouncement [

	
]

{ #category : #accessing }
GTSpotterRecorderEvent >> hashForText: aString [
	^ aString hash bitXor: self settings secretUUID hash
]

{ #category : #accessing }
GTSpotterRecorderEvent >> infoAt: key [
	^ self infoAt: key ifAbsent: [ nil ]
]

{ #category : #accessing }
GTSpotterRecorderEvent >> infoAt: key ifAbsent: absentBlock [
	info ifNil: [ ^ absentBlock value].
	^ info at: key ifAbsent: absentBlock
]

{ #category : #accessing }
GTSpotterRecorderEvent >> infoAt: key put: value [
	info ifNil: [ info := Dictionary new ].
	^ info at: key put: value
]

{ #category : #accessing }
GTSpotterRecorderEvent >> infoAt: key putHashForText: valueString [ 
	^ self 
		infoAt: key 
		put: (self hashForText: valueString)
]

{ #category : #initialization }
GTSpotterRecorderEvent >> initialize [
	super initialize.
	timestamp := Time now asDateAndTime asUnixTime 
]

{ #category : #accessing }
GTSpotterRecorderEvent >> settings [
	^ GTSpotterEventRecorderSettings uniqueInstance
]

{ #category : #accessing }
GTSpotterRecorderEvent >> textInfoFrom: aString [
	| strings hashes sizes specials |
	aString isNil ifTrue: [ ^ nil ].
	aString size isZero ifTrue: [ ^ nil ].
	strings := aString substrings.
	hashes := strings collect: [ :each | self hashForText: each ] as: Array.
	sizes := strings collect: #size as: Array.
	specials := strings collect: [ :each | each beginsWith: '#' ] as: Array.
	^ Array with: hashes with: sizes with: specials 
]
