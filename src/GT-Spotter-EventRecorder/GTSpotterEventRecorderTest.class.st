"
A GTSpotterEventRecorderTest is a test class for testing the behavior of GTSpotterEventRecorder
"
Class {
	#name : #GTSpotterEventRecorderTest,
	#superclass : #TestCase,
	#instVars : [
		'recorder',
		'checkedEvents'
	],
	#category : #'GT-Spotter-EventRecorder-Tests'
}

{ #category : #accessing }
GTSpotterEventRecorderTest class >> instancesForAllEvents [
	"We instantiate all events and set all instance variables."
	^ GTSpotterRecorderEvent allSubclasses collect: [ :eachEventClass | | instance |
		instance := eachEventClass new.
		1 to: eachEventClass instSize do: [ :index |
			(instance instVarAt: index) ifNil: [ | variableName |
				variableName := eachEventClass instVarNameForIndex: index.
				(instance respondsTo: variableName) ifTrue: [ instance perform: variableName ] ].
			(instance instVarAt: index) ifNil: [ 
				instance instVarAt: index put: #value ] ].
		instance
	 ]
]

{ #category : #accessing }
GTSpotterEventRecorderTest class >> serializeAnnouncementWithAllEvents [
	"self serializeAnnouncementWithAllEvents"
	| recorder |
	recorder := GTSpotterEventRecorder new.
	recorder stopDelivering. 
	^ recorder serializedAnnouncementFrom: self instancesForAllEvents.
	
]

{ #category : #accessing }
GTSpotterEventRecorderTest class >> storeSerializedAnnouncementIntoMethod: aSymbol [
	"self storeSerializedAnnouncementIntoMethod: #version1"
	| methodSource |
	methodSource := (String streamContents: [ :aStream |
		aStream 
			nextPutAll: aSymbol asString; cr; 
			tab; 
			nextPutAll: '"Automatically created by class method #storeSerializedAnnouncementIntoMethod: ';
			print: aSymbol;
			nextPut: $.;
			cr; tab;
			nextPutAll: 'It is a serialized event recorder announcement GTSpotterRecorderDataAnnouncement.';
			cr; tab;
			nextPutAll: 'It contatins all instances of the recorder events."';
			cr; tab;
			nextPutAll: '<spotterEventRecorderSerializedData>';
			cr; tab;
			nextPutAll: '^ '.
		self serializeAnnouncementWithAllEvents storeOn: aStream. ]).
	self compile: methodSource classified: 'serialized data'.
]

{ #category : #asserting }
GTSpotterEventRecorderTest >> assertAnnouncement: announcement [
	self assert: announcement notNil.
	self assert: (announcement isKindOf: GTSpotterRecorderDataAnnouncement).
	announcement materializedData do: [ :eachEvent |
		"Check that all instance variables have some value."
		1 to: eachEvent class instSize do: [ :index |
			self 
				assert: (eachEvent instVarAt: index) notNil 
				description: [ String streamContents: [ :aStream |
						aStream 
							nextPutAll: 'Instance variable called ';
							print: (eachEvent class instVarNameForIndex: index);
							nextPutAll: ' of instance ';
							nextPutAll: eachEvent className;
							nextPutAll: ' is nil.' ] ]
		]
	]
]

{ #category : #asserting }
GTSpotterEventRecorderTest >> assertVersion: aMethodName [
	| announcement |
	announcement := recorder materialize: (self perform: aMethodName).
	self assertAnnouncement: announcement.
	checkedEvents addAll: (announcement materializedData collect: #class).
]

{ #category : #accessing }
GTSpotterEventRecorderTest >> recordedData [
	^ GTSpotterRecorderEvent allSubclasses collect: #new
]

{ #category : #running }
GTSpotterEventRecorderTest >> setUp [
	super setUp.
	recorder := GTSpotterEventRecorder new.
	recorder stopDelivering.
]

{ #category : #tests }
GTSpotterEventRecorderTest >> testMaterializeVersions [
	| versions notMaterializedEvents |
	checkedEvents := Set new.
	versions := Pragma allNamed: #spotterEventRecorderSerializedData in: self class.
	self assert: versions notEmpty.
	versions do: [ :eachPragma |
		self assertVersion: eachPragma selector ].
	self assert: checkedEvents notEmpty.
	notMaterializedEvents := checkedEvents copy 
		removeAll: GTSpotterRecorderEvent allSubclasses; 
		yourself.
	self 
		assert: notMaterializedEvents isEmpty
		description: [ 
			'Some events are not tested for backward compatibility.', String cr,
			'You should create new version using method #storeSerializedAnnouncementIntoMethod:.', String cr,
			'Do not override the existing serialized versions!'
		]
]

{ #category : #tests }
GTSpotterEventRecorderTest >> testPostponeSomeDataOnAct [
	| maybeDeliveredData toBeDeliveredData postponedData |
	self assert: recorder postponedData isNil.
	maybeDeliveredData := recorder newCollectionWithPostponedData.
	self assert: maybeDeliveredData size equals: 0.
	maybeDeliveredData 
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderExitAnnouncementEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderActOnEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new.
	toBeDeliveredData := recorder postponeSomeData: maybeDeliveredData.
	postponedData := recorder postponedData.
	self assert: toBeDeliveredData size equals: 6.
	self assert: postponedData size equals: 2.
	1 to: 6 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (toBeDeliveredData at: index) ].
	7 to: 8 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (postponedData at: index - 6) ].
	"second delivery"
	maybeDeliveredData := recorder newCollectionWithPostponedData.
	self assert: recorder postponedData isNil.
	self assert: maybeDeliveredData size equals: 2.
	1 to: 2 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (postponedData at: index) ].
	self assert: recorder postponedData isNil.
	maybeDeliveredData
		add: GTSpotterRecorderActOnEvent new.
	toBeDeliveredData := recorder postponeSomeData: maybeDeliveredData.
	postponedData := recorder postponedData.
	self assert: toBeDeliveredData size equals: 3.
	self assert: postponedData isNil.
	1 to: 3 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (toBeDeliveredData at: index) ].

]

{ #category : #tests }
GTSpotterEventRecorderTest >> testPostponeSomeDataOnExit [
	| maybeDeliveredData toBeDeliveredData postponedData |
	self assert: recorder postponedData isNil.
	maybeDeliveredData := recorder newCollectionWithPostponedData.
	self assert: maybeDeliveredData size equals: 0.
	maybeDeliveredData 
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderExitAnnouncementEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderExitAnnouncementEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new.
	toBeDeliveredData := recorder postponeSomeData: maybeDeliveredData.
	postponedData := recorder postponedData.
	self assert: toBeDeliveredData size equals: 6.
	self assert: postponedData size equals: 2.
	1 to: 6 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (toBeDeliveredData at: index) ].
	7 to: 8 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (postponedData at: index - 6) ].
	"second delivery"
	maybeDeliveredData := recorder newCollectionWithPostponedData.
	self assert: recorder postponedData isNil.
	self assert: maybeDeliveredData size equals: 2.
	1 to: 2 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (postponedData at: index) ].
	self assert: recorder postponedData isNil.
	maybeDeliveredData
		add: GTSpotterRecorderExitAnnouncementEvent new.
	toBeDeliveredData := recorder postponeSomeData: maybeDeliveredData.
	postponedData := recorder postponedData.
	self assert: toBeDeliveredData size equals: 3.
	self assert: postponedData isNil.
	1 to: 3 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (toBeDeliveredData at: index) ].

]

{ #category : #tests }
GTSpotterEventRecorderTest >> testPrimitivePrepareDeliveryData [
	| maybeDeliveredData  postponedData bytes announcement events |
	self assert: recorder postponedData isNil.
	maybeDeliveredData := OrderedCollection new.
	maybeDeliveredData 
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderExitAnnouncementEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new;
		add: GTSpotterRecorderExitAnnouncementEvent new;
		add: GTSpotterRecorderOpenEvent new;
		add: GTSpotterRecorderShowPreviewEvent new.
	maybeDeliveredData do: [ :each | recorder recordedData nextPut: each ].
	recorder primitivePrepareDeliveryData.
	postponedData := recorder postponedData.
	self assert: postponedData size equals: 2.
	7 to: 8 do: [ :index |
		self assert: (maybeDeliveredData at: index) == (postponedData at: index - 6) ].
	"second delivery"
	recorder recordedData nextPut: GTSpotterRecorderExitAnnouncementEvent new.
	recorder primitivePrepareDeliveryData.
	postponedData := recorder postponedData.
	self assert: postponedData isNil.
	self assert: recorder deliveryQueue size equals: 2.
	"first delivered data"
	bytes := recorder deliveryQueue nextOrNil.
	self assert: bytes notNil.
	announcement := recorder materialize: bytes.
	events := announcement materializedData.
	self assert: events size equals: 6.
	events withIndexDo: [ :eachEvent :index |
		self assert: (maybeDeliveredData at: index) class = eachEvent class ].
	"second delivered data"
	bytes := recorder deliveryQueue nextOrNil.
	self assert: bytes notNil.
	announcement := recorder materialize: bytes.
	events := announcement materializedData.
	self assert: events size equals: 3.
	self assert: (maybeDeliveredData at: 7) class = events first class.
	self assert: (maybeDeliveredData at: 8) class = events second class.
	self assert: events third class = GTSpotterRecorderExitAnnouncementEvent.
]

{ #category : #tests }
GTSpotterEventRecorderTest >> testSerializedAnnouncementFrom [
	| byteArray announcement |
	byteArray := recorder serializedAnnouncementFrom: self recordedData.
	announcement := recorder materializedAnnouncementFrom: byteArray.
	self assert: announcement class equals: GTSpotterRecorderDataAnnouncement.
	self assert: announcement materializedData isCollection.
	self assert: announcement materializedData size equals: self recordedData size.
]

{ #category : #'serialized data' }
GTSpotterEventRecorderTest >> version1 [
	"Automatically created by class method #storeSerializedAnnouncementIntoMethod: #version1.
	It is a serialized event recorder announcement GTSpotterRecorderDataAnnouncement.
	It contatins all instances of the recorder events."
	<spotterEventRecorderSerializedData>
	^ #[31 139 8 0 0 0 0 0 0 0 115 11 117 245 97 56 196 200 192 192 192 207 0 1 236 34 110 62 238 57 249 73 137 57 206 57 137 197 197 206 57 165 197 37 169 69 64 9 86 14 55 31 143 212 196 148 212 34 33 207 148 212 188 146 204 146 74 151 204 228 146 204 252 188 196 162 74 46 167 202 146 212 224 202 220 164 252 28 65 255 34 160 154 212 20 231 252 156 156 84 176 60 127 104 94 74 106 90 102 94 106 138 127 82 22 80 72 206 205 39 32 191 56 179 36 179 44 213 34 56 55 49 39 199 51 175 36 53 61 181 8 97 23 19 3 163 24 208 182 252 252 236 128 162 204 92 176 74 132 36 35 51 127 81 106 114 62 200 150 176 212 162 98 160 5 120 212 178 2 189 227 150 89 1 179 26 73 134 145 69 178 160 40 213 55 17 200 205 76 204 201 172 74 4 57 213 17 236 224 98 193 196 148 148 76 176 215 114 32 250 138 165 10 242 139 75 176 43 230 207 69 21 150 117 243 65 4 12 34 20 144 172 102 2 17 146 110 62 193 153 185 5 57 169 216 148 48 177 64 163 131 129 135 155 151 19 164 156 131 29 38 194 5 196 146 48 54 174 216 98 227 4 197 136 99 81 81 34 52 110 74 138 50 243 210 145 162 137 219 5 232 106 199 188 148 144 204 220 84 69 247 144 224 130 252 18 160 206 32 104 192 2 37 19 29 243 242 242 75 243 146 83 115 129 145 205 133 240 145 60 34 246 12 205 176 71 31 227 188 62 220 81 194 196 196 17 144 145 88 148 111 162 103 160 98 106 145 98 98 148 146 104 166 155 108 105 105 172 107 146 152 98 168 107 97 102 100 162 107 154 150 98 102 100 97 110 105 108 102 104 64 68 106 97 228 192 99 29 11 131 106 157 148 252 233 59 27 24 246 6 255 191 122 1 28 108 64 17 163 61 42 55 24 214 231 67 69 112 235 231 96 230 204 204 77 76 79 245 72 44 206 96 73 1 6 139 112 113 106 49 40 209 57 23 165 130 163 27 20 128 60 201 249 185 5 165 64 13 161 161 158 46 156 37 64 145 226 146 196 220 2 145 212 50 96 216 5 161 38 86 158 28 96 192 23 151 132 22 0 13 75 229 1 155 13 149 65 10 89 99 35 28 33 203 186 213 79 71 216 205 7 20 143 152 41 26 232 219 38 249 110 14 104 218 152 58 37 55 252 178 129 200 241 221 59 185 122 30 205 8 19 17 16 112 172 113 99 149 255 160 58 77 180 204 207 246 113 192 135 218 109 113 17 38 190 89 147 248 158 29 255 172 252 147 211 103 247 217 115 165 115 85 159 111 137 46 174 255 121 255 78 245 228 236 249 87 101 222 134 59 94 222 210 117 77 58 120 217 91 25 161 107 46 71 148 60 56 186 91 156 152 194 217 106 111 149 245 49 84 30 200 191 110 187 64 232 244 59 198 60 207 51 26 143 238 126 122 190 142 101 251 107 115 201 149 102 59 146 14 108 150 80 20 184 173 157 126 165 185 216 231 96 182 201 254 149 43 67 111 91 166 49 121 223 105 180 189 238 222 114 101 101 11 247 131 206 245 139 194 34 2 238 73 252 174 59 179 81 126 114 231 198 130 197 135 22 30 85 210 143 111 228 126 154 192 180 122 117 65 78 141 105 129 109 138 230 20 49 102 190 248 9 191 142 116 60 152 175 113 235 85 221 158 196 64 215 121 237 143 47 120 228 207 141 224 154 49 225 241 195 174 255 239 191 116 189 85 233 244 220 100 240 100 151 196 94 177 220 227 71 235 28 18 100 130 116 190 158 94 40 185 185 216 88 208 206 214 116 134 230 234 229 247 254 215 171 175 142 250 60 187 125 121 222 129 37 191 172 94 170 159 78 210 58 27 126 41 75 185 138 49 110 237 226 172 25 109 124 33 191 94 93 9 18 140 53 184 215 187 112 225 173 105 147 15 92 74 189 119 66 96 181 224 135 169 62 107 182 206 75 234 219 192 126 92 198 74 66 47 57 41 117 141 151 242 153 168 247 219 110 62 253 80 117 215 205 229 64 217 172 230 140 217 89 251 59 170 110 4 127 228 125 158 168 61 119 77 29 27 219 105 163 13 183 68 167 253 158 178 105 194 182 73 10 211 131 34 148 25 102 77 44 16 23 200 223 154 235 179 49 227 251 93 157 229 10 165 151 164 108 27 57 221 247 206 121 30 39 57 249 221 212 123 142 42 45 91 93 210 202 211 247 244 21 110 251 115 123 239 185 201 181 220 95 37 59 107 5 132 126 58 114 94 46 78 75 40 20 50 239 214 152 59 53 236 196 206 95 182 161 207 183 173 235 249 236 24 146 41 214 117 208 101 89 222 70 139 69 179 61 239 157 241 245 123 170 182 188 120 178 241 206 147 55 239 164 44 53 113 122 101 239 20 96 107 245 96 13 171 147 129 158 209 244 115 79 203 138 180 205 51 123 242 210 215 93 221 31 195 151 197 100 184 224 186 188 78 105 103 202 178 19 127 86 236 254 95 22 249 56 159 251 172 181 90 217 147 38 185 204 117 111 195 124 139 31 30 254 116 124 234 219 171 123 217 223 191 223 91 189 35 121 150 247 250 119 251 118 254 191 102 34 30 159 125 93 254 216 105 241 215 253 102 114 246 183 107 254 125 57 121 109 185 125 101 228 132 199 19 128 165 20 206 18 151 149 145 43 5 94 140 16 46 37 217 64 185 15 84 208 113 136 114 8 114 10 240 10 115 9 241 240 137 241 139 139 176 75 0 0 84 138 255 137 183 6 0 0]
]
