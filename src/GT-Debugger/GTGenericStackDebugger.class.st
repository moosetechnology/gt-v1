"
I am a browser that provides Smalltalk debugging functionality.
 
"
Class {
	#name : #GTGenericStackDebugger,
	#superclass : #GTMoldableDebugger,
	#classVars : [
		'AlwaysOpenFullDebugger',
		'ErrorRecursion',
		'FilterCommonMessageSends',
		'LogDebuggerStackToFile',
		'LogFileName'
	],
	#category : #'GT-Debugger-UI'
}

{ #category : #'settings api' }
GTGenericStackDebugger class >> alwaysOpenFullDebugger [
	^ AlwaysOpenFullDebugger ifNil: [AlwaysOpenFullDebugger := false]
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> alwaysOpenFullDebugger: aBoolean [
	AlwaysOpenFullDebugger := aBoolean.
]

{ #category : #'utilities api' }
GTGenericStackDebugger class >> closeAllDebuggers [
	"GTGenericStackDebugger closeAllDebuggers"
	(SystemWindow allSubInstances select: [:w | 
		 w model isKindOf: GTGenericStackDebugger])
			do: [:w | w delete ]
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> defaultLogFileName [
	^ 'PharoDebug.log'
]

{ #category : #accessing }
GTGenericStackDebugger class >> defaultTitle [
	^ 'GT Debugger'
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterCommonMessageSends [
	self flag: 'horrible hack not to break the setting browser'.
	^ false
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterCommonMessageSends: aBoolean [
	FilterCommonMessageSends := aBoolean
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterDoItSelectors [
	^ false
]

{ #category : #'accessing - ancient preference selectors' }
GTGenericStackDebugger class >> filterDoItSelectors: aBoolean [
	self flag: 'just for backward compatibility'
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterKernelClasses [
	^ false
]

{ #category : #'accessing - ancient preference selectors' }
GTGenericStackDebugger class >> filterKernelClasses: aBoolean [
	self flag: 'just for backward compatibility'
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterLinkSelectors [
	^ false
]

{ #category : #'accessing - ancient preference selectors' }
GTGenericStackDebugger class >> filterLinkSelectors: aBoolean [ 
	self flag: 'just for backward compatibility'
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> filterNilSelectors [
	^ false
]

{ #category : #'accessing - ancient preference selectors' }
GTGenericStackDebugger class >> filterNilSelectors: aBoolean [ 
	self flag: 'just for backward compatibility'
]

{ #category : #testing }
GTGenericStackDebugger class >> handlesContext: aContext [

	^ true
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> logDebuggerStackToFile [
	^ LogDebuggerStackToFile ifNil: [LogDebuggerStackToFile := true]
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> logDebuggerStackToFile: aBoolean [
	 LogDebuggerStackToFile := aBoolean
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> logFileName [
	^ LogFileName ifNil: [ self defaultLogFileName ] 
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> logFileName: newName [
	LogFileName := newName
]

{ #category : #'tools registry' }
GTGenericStackDebugger class >> register [

	self registerToolsOn: Smalltalk tools.
	self registerExtraToolsOn: Smalltalk tools.

]

{ #category : #'tools registry' }
GTGenericStackDebugger class >> registerExtraToolsOn: registry [
	"This adds self in the list of tools that appears in the small debugger"
	registry registerDebugger: self withRank: 3.
]

{ #category : #'tools registry' }
GTGenericStackDebugger class >> registerToolsOn: registry [
	registry register: self as: #debugger.

]

{ #category : #accessing }
GTGenericStackDebugger class >> sessionClass [

	^ DebugSession 
]

{ #category : #'settings api' }
GTGenericStackDebugger class >> stackWidgetClass [
	self flag: 'horrible hack not to break the setting browser'.
	^ self
]

{ #category : #accessing }
GTGenericStackDebugger class >> variablesBrowserClass [

	^ GTDebuggerVariablesBrowser
]

{ #category : #'building actions' }
GTGenericStackDebugger >> codeActionsPragmas [

	^ #( codeDebuggingAction )
]

{ #category : #accessing }
GTGenericStackDebugger >> codePane [

	^ self browser paneNamed: #code
]

{ #category : #accessing }
GTGenericStackDebugger >> codePresentation [
	
	^ self codePane presentations first
]

{ #category : #'accessing context' }
GTGenericStackDebugger >> contextToSelectFrom: aSession [
	^ aSession context
]

{ #category : #building }
GTGenericStackDebugger >> debuggerStructureIn: browser [
	
	browser
		row: #stack;
		row: #code span: 2;
		row: #inspector.
		
]

{ #category : #building }
GTGenericStackDebugger >> debuggerTransmissionsIn: browser [

	browser transmit
		fromOutsideEntityPort;
		to: #stack;
		andShow: [ :composite | self stackIn: composite ].
	browser transmit
		from: #stack port: #entity;
		to: #stack port: #selection;
		when: [ :session | session notNil ];
		transformed: [:session | self contextToSelectFrom: session ].
	browser transmit "need a method call when the selection is changed"
		from: #stack port: #selection;
		to: #stack port: #action;
		transformed: [ :context | 
			self selectionChanged: context ].
	browser transmit
		from: #stack port: #selection;
		to: #code;
		andShow: [ :composite :aContext | self methodCodeIn: composite forContext: aContext ].
	browser transmit
		from: #stack port: #selection;
		to: #inspector;
		andShow: [ :composite | self inspectorIn: composite ] 

]

{ #category : #'building actions' }
GTGenericStackDebugger >> debuggingActionsPragmas [

	^ #( debuggingAction )
]

{ #category : #'printing/formatting' }
GTGenericStackDebugger >> formatStackEntry: aContext [

	^ Text 
		string: (self printStackEntry: aContext )
		attributes: (self textAttributesForStackEntry: aContext) 
	 
]

{ #category : #actions }
GTGenericStackDebugger >> inspect: anObject [

	"Use silentValue: instead of value: as just using value: causes the current inspector to refresh the content of it current presentations without rebuiling them (the dynamic presentation contained by the inspector does not rebuild its content)"
	((self browser paneNamed: #inspector) port: #entity) silentValue: anObject.
	
	(self browser paneNamed: #inspector) update.
	
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> inspectorIn: aComposite [

	^ aComposite dynamic 
		display: [:anObject |
			self inspectorIn: GLMCompositePresentation new on: anObject ]
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> inspectorIn: aComposite on: anObject [
				
	^ anObject gtConstructDebuggerInspectorIn: aComposite for: self
	
	
]

{ #category : #'building actions' }
GTGenericStackDebugger >> installCodeActionsFor: aPresentation [
	
	self installActionsForRootPragmas: self codeActionsPragmas in: aPresentation
]

{ #category : #'building actions' }
GTGenericStackDebugger >> installDebuggingActionsFor: aPresentation [

	"self installActionsForRootPragmas: self debuggingActionsPragmas in: aPresentation"
]

{ #category : #'building actions' }
GTGenericStackDebugger >> installStackDebuggingActionsFor: aPresentation [

	self 
		installActionsForRootPragmas: self stackDebuggingActionsPragmas 
		in: aPresentation
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> methodCodeIn: composite forContext: aContext [

	(self methodCodeWidgetIn: composite forContext: aContext)
		initialize: [ :code | 
			code selectionInterval: (self session selectedCodeRangeForContext: self currentContext) ];
		with: [ :code | self installCodeActionsFor: code ]
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> methodCodeWidgetIn: composite forContext: aContext [

	^ composite pharoMethod
		title: 'Source';
		format: [ aContext sourceCode ];
		smalltalkClass: [  aContext methodClass ];
		doItReceiver: [ aContext receiver ];
		doItContext: [  aContext ]
]

{ #category : #opening }
GTGenericStackDebugger >> openWithFullView [
	"Create and schedule a full debugger with the given label. Do not
	terminate the current active process."
	
	self open
]

{ #category : #opening }
GTGenericStackDebugger >> openWithNotification: aString [

	self openWithFullView
]

{ #category : #'printing/formatting' }
GTGenericStackDebugger >> printStackEntry: aContext [

	^ (String streamContents: [:stream | aContext printDebugOn: stream ]) 
			replaceAll: Character cr with: Character space 
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> retrieveStackFrom: aSession [

	^ aSession stack
		
]

{ #category : #updating }
GTGenericStackDebugger >> selectTopContext [
	((self browser paneNamed: #stack) port: #selection) value: self interruptedContext
]

{ #category : #'accessing context' }
GTGenericStackDebugger >> selectedContext [

	^ ((self browser paneNamed: #stack) port: #selection) value
]

{ #category : #accessing }
GTGenericStackDebugger >> selectedText [

	^ (self codePane port: #selectedText) value
]

{ #category : #updating }
GTGenericStackDebugger >> selectionChanged: aContext [
	
	self class enableStackColoring ifTrue: [  
		UIManager default defer: [
			(self browser paneNamed: #stack) presentations  presentations ifNotEmpty: [ :p | 
				self session interruptedProcess ifNotNil: [ p first update ] ] ] ]
]

{ #category : #accessing }
GTGenericStackDebugger >> selectionInterval [

	^ self selectionIntervalForPane: #code
]

{ #category : #accessing }
GTGenericStackDebugger >> selectionInterval: anInterval [

	^ ((self browser paneNamed: #code) port: #selectionInterval) value: anInterval
]

{ #category : #accessing }
GTGenericStackDebugger >> selectionIntervalForPane: aSymbol [

	^ ((self browser paneNamed: aSymbol) port: #selectionInterval) value ifNil: [ ^ 1 to: 0 ]
]

{ #category : #'old api' }
GTGenericStackDebugger >> send [
	
	self session stepInto: self currentContext.
	self updateBrowser.

]

{ #category : #accessing }
GTGenericStackDebugger >> sourceCode: aString [

	^ ((self browser paneNamed: #code) port: #text) value: aString
]

{ #category : #'building actions' }
GTGenericStackDebugger >> stackDebuggingActionsPragmas [

	^ #( stackDebuggingAction ), self debuggingActionsPragmas

]

{ #category : #'building presentations' }
GTGenericStackDebugger >> stackIn: composite [

	^ (self stackWidgetIn: composite)
		with: [ :stackWidget | self installStackDebuggingActionsFor: stackWidget ]
]

{ #category : #accessing }
GTGenericStackDebugger >> stackPresentation [
	
	^ (self browser paneNamed: #stack) presentations first
]

{ #category : #'building presentations' }
GTGenericStackDebugger >> stackWidgetIn: composite [

	^ composite fastList	
		title: 'Stack';
		showOnly: 50;
		display: [:aSession | self retrieveStackFrom: aSession];
		format: [ :each | self formatStackEntry: each]
]

{ #category : #'printing/formatting' }
GTGenericStackDebugger >> textAttributesForStackEntry: aContext [

	(self selectedContext isNil or: self class enableStackColoring not) 
		ifTrue: [ ^ {TextColor color: Smalltalk ui theme textColor} ].

	^ Smalltalk ui theme styleContext: aContext from: self.
]

{ #category : #updating }
GTGenericStackDebugger >> updateBrowser [
	super updateBrowser.
	self updateSelectionInterval.
]

{ #category : #updating }
GTGenericStackDebugger >> updateSelectionInterval [

	self selectedContext ifNil: [ ^ self ].
	self selectionInterval: (self session pcRangeForContext:  self selectedContext )
]

{ #category : #accessing }
GTGenericStackDebugger >> window [
	"The default debugger from Pharo defines this method.
	Some tools use it and break. Try to return the window
	if possible. Kind of a hack."
	^ self dependents ifNotNil: [ :dependentsArray |
		dependentsArray ifNotEmpty: [ 
			(dependentsArray at: 1) isSystemWindow
				ifTrue: [ dependentsArray at: 1 ]
				ifFalse: [ nil ] ] ]
]
