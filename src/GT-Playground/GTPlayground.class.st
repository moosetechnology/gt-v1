"
Playground is the correspondent of a classic Smalltalk Workspace. The problem with the name Workspace is that it implies that work should be carried out in this space, while this is not a best practice. Playground describes better the intention of providing a place in which we can quickly play with some code.

The model behind a Playground instance is a PlayPage object.

!!Use cases
The Playground can be used in two ways

# As a place to construct and try out code snippets.
# as an entry point into an inspection process.

In both cases, the ability of diving into objects to the right is an important feature.

!!Running
[ [ [ 
	self open.
 ] ] ]
"
Class {
	#name : #GTPlayground,
	#superclass : #GLMCompositePresentation,
	#classVars : [
		'GTPlaygroundEnabledStatus',
		'PreferredExtent',
		'RememberPreferredExtent'
	],
	#category : #'GT-Playground'
}

{ #category : #'compatibility-tools' }
GTPlayground class >> edit: aString label: aLabel [

"Open a new playground with the given contents"
"Compatibility with the original Workspace"
"#edit: aText label: labelString accept: anAction"
"	^(Smalltalk tools workspace openLabel: labelString)
		acceptContents:  aText;
		acceptAction: anAction;
		yourself."

"Open an editor on the given string/text"
	| page |
	"self halt"

	page := GTPlayPage new
		saveContent: aString;
		title: aLabel;
		yourself.
		
	self flag: #TODO. "We need to put an equivalent to the acceptAction thing."
	^ self new openOn: page
]

{ #category : #examples }
GTPlayground class >> examplePlaygroundWithBindings [
	| playground wsBindings |
	wsBindings := Dictionary newFrom: { #number-> 1 }.
	playground := Smalltalk tools workspace
		openContents: 'number + 1'.
	playground
		setBindings: wsBindings.
]

{ #category : #settings }
GTPlayground class >> isGTPlaygroundEnabled [

	^ GTPlaygroundEnabledStatus ifNil: [ GTPlaygroundEnabledStatus := Smalltalk tools workspace = self ]
]

{ #category : #'instance creation' }
GTPlayground class >> open [
	"self open"
	| page |
	page := GTPlayPage new.
	^ self openOn: page
]

{ #category : #'instance creation' }
GTPlayground class >> openContents: aString [
	"Open a new playground with the given contents. aString has to be Smalltalk code. The style is applied"
	

	| page |
	
	page := GTPlayPage new
		saveContent: aString;
		yourself.
	^ self openOn: page
]

{ #category : #'instance creation' }
GTPlayground class >> openContents: aString label: aLabel [
	"Open a new playground with the given contents"

	| page |

	page := GTPlayPage new
		saveContent: aString;
		title: aLabel;
		yourself.
	^ self openOn: page
]

{ #category : #'compatibility-tools' }
GTPlayground class >> openLabel: aLabel [
	| page |

	page := GTPlayPage new
		title: aLabel;
		yourself.
	^ self openOn: page
]

{ #category : #settings }
GTPlayground class >> preferredExtent [
	^ PreferredExtent ifNil: [ PreferredExtent := 600@400 ]
]

{ #category : #settings }
GTPlayground class >> preferredExtent: aPoint [
	PreferredExtent := aPoint
]

{ #category : #settings }
GTPlayground class >> preferredHeight [
	^ self preferredExtent y
]

{ #category : #settings }
GTPlayground class >> preferredHeight: aHeight [
	self preferredExtent setX: self preferredExtent x setY: aHeight
]

{ #category : #settings }
GTPlayground class >> preferredWidth [
	^ self preferredExtent x
]

{ #category : #settings }
GTPlayground class >> preferredWidth: aWidth [
	self preferredExtent setX: aWidth setY: self preferredExtent y
]

{ #category : #'tools registry' }
GTPlayground class >> register [

	self registerToolsOn: Smalltalk tools
]

{ #category : #'tools registry' }
GTPlayground class >> registerToolsOn: registry [
	"Add ourselves to registry. See [Smalltalk tools]"
	"self registerToolsOn: Smalltalk tools" 
	registry register: self as: #workspace

]

{ #category : #settings }
GTPlayground class >> rememberPreferredExtent [
	^ RememberPreferredExtent ifNil: [ RememberPreferredExtent := true ]
]

{ #category : #settings }
GTPlayground class >> rememberPreferredExtent: aBoolean [
	^ RememberPreferredExtent := aBoolean
]

{ #category : #settings }
GTPlayground class >> setGTPlaygroundEnabledStatus: aBoolean [
	| oldStatus |
	
	oldStatus := self isGTPlaygroundEnabled.
	GTPlaygroundEnabledStatus := aBoolean.
	oldStatus ~= GTPlaygroundEnabledStatus ifTrue: [ 
		GTPlaygroundEnabledStatus 
			ifTrue: [ self register ]
			ifFalse: [ Workspace registerToolsOn: Smalltalk tools ] ]
	
	
]

{ #category : #settings }
GTPlayground class >> setPreferredExtentIfWanted: anExtent [
	self rememberPreferredExtent ifTrue: [ 
		self preferredExtent: anExtent ]
]

{ #category : #settings }
GTPlayground class >> settingsOn: aBuilder [ 
	<systemsettings>
	
	(aBuilder setting: #GTPlaygroundStatus)
		target: self;
		parent: #gt;
		getSelector: #isGTPlaygroundEnabled;
		setSelector: #setGTPlaygroundEnabledStatus:; 
		label: 'GTPlayground';
		description: 'Enable or disable the GTPlayground.'.
	(aBuilder setting: #customDirectory)
		parent: #gt;
		type: #Directory;
		target: GTPlayBook;
		description: 'The path to the local Playground cache that stores all Playground scripts in ph files' translated;
		label: 'Local Playground cache directory'.
	(aBuilder setting: #GTPlaygroundPreferredWidth)
		target: self;
		parent: #gt;
		getSelector: #preferredWidth;
		setSelector: #preferredWidth:; 
		label: 'Playground width';
		description: 'The preferred width of new Playground windows'.
	(aBuilder setting: #GTPlaygroundPreferredHeight)
		target: self;
		parent: #gt;
		getSelector: #preferredHeight;
		setSelector: #preferredHeight:; 
		label: 'Playground height';
		description: 'The preferred height of new Playground windows'.
	(aBuilder setting: #GTPlaygroundRememberPreferredExtent)
		target: self;
		parent: #gt;
		getSelector: #rememberPreferredExtent;
		setSelector: #rememberPreferredExtent:; 
		label: 'Remember extent of Playground';
		description: 'Enable or disable remembering of the extent of Playground windows on resize. When the preference is true, resizing a Playground window will affect the preferred width and height of future Playground windows'.
	



]

{ #category : #'tools registry' }
GTPlayground class >> taskbarIcon [
	"Answer the icon for the receiver in a task bar."

	^ Smalltalk ui icons iconNamed: #workspaceIcon
]

{ #category : #'instance creation' }
GTPlayground class >> title [
	^ 'Playground'
]

{ #category : #accessing }
GTPlayground >> acceptAction: anAction [
	"acceptAction := anAction."
]

{ #category : #accessing }
GTPlayground >> acceptContents: aString [

	^ (self entity acceptContents: aString)
		ifTrue: [  
			self update.
			true]
]

{ #category : #building }
GTPlayground >> actionsForPreviousContents [
	^ GTPlayBook instance pagesSorted
		collect: [ :each | 
			GLMGenericAction new
				title: (each content asString contractTo: 50);
				action: [ :text | 
					text entity saveContent: each content.
					text update ];
				yourself ]
]

{ #category : #building }
GTPlayground >> codeIn: a [
	^ a pharoPlayground
		title: [ self newEditableLabelMorph ];
		format: [ :page | page content ];
		act: [ :text :page |
				text selectionInterval: (1 to: text text size).
				text highlightEvaluateAndDo: [ :result | text selection: result ] ]
			icon: GLMUIThemeExtraIcons glamorousGo
			on: $G
			entitled: 'Do it all and go';
		installGoAction;
		installDefaultSelectionActions;
		act: [ :text :page | page publish ]
			icon: GLMUIThemeExtraIcons glamorousSaveToUrl
			entitled: 'Remote publish';
		dynamicActions: [ self actionsForPreviousContents ];
		onChangeOfPort: #text act: [ :text :page | page saveContent: text text ]
]

{ #category : #building }
GTPlayground >> compose [
	self title: self defaultPlaygroundTitle.
	self extraWindowActions.
	self custom:
			(GTInspector new
				noTitle; 
				noActions;
				showFirst: [ :composite |
					self codeIn: composite ];
				yourself);
		on: GLMBrowserClosing do: [ 
			"This is a hack for the moment.
			We need a better mechanism from Glamour to help 
			us keep the model in sync"
			self entity
					saveContent: self first panes first presentations first text.
			GTPlayBook instance addPageIfInteresting: self entity ]
]

{ #category : #'accessing-dynamic' }
GTPlayground >> currentBindings [ 

	^ self inspectorPresentation firstPresentation currentBindings
]

{ #category : #'accessing-defaults' }
GTPlayground >> defaultPlaygroundTitle [
	^ 'Playground'
]

{ #category : #building }
GTPlayground >> extraWindowActions [

	self flag: 'commented for now'
	"self act: [ self openCommand ] entitled: 'Open...'.
	self act: [ self saveAsCommand ] entitled: 'Save as...'."
]

{ #category : #'accessing-dynamic' }
GTPlayground >> inspectorPresentation [

	^ self presentations first 
]

{ #category : #accessing }
GTPlayground >> label: aString [
	"Set the window label to the given string"
	self title: aString.
	self update
]

{ #category : #building }
GTPlayground >> newEditableLabelMorph [
	| hPadding |
	
	hPadding := 5.
	^ GLMEditableLabelBrick new
		hSpaceFill;
		text: self snippetTitle;
		with: [ :label | label when: #onAccepted do: [ self snippetTitle: label text ] ];
		cancelOnEscape;
		cancelOnFocusLost;
		with: [ :b | b margin: { b themer focusedBorderWidth . 0 } ];
		with: [ :b | b editBrick
			hShrinkWrap;
			rubricBackgroundColor: b themer rubricBackgroundColor;
			margins: (hPadding@0 corner: hPadding@0) ];
		with: [ :b | b maxWidth: [ b approximateWidth + b owner hPadding] ];
		with: [ :b | b labelBrick margin: { 0 . hPadding + 2. 0 . hPadding } ];
		with: [ :b | b layout widthDependency: [ b owner ] ];
		with: [ :b | b editBrick layout widthDependency: [ b ] ];
		yourself 
]

{ #category : #private }
GTPlayground >> openCommand [

	GTExternalPlayPage fromFileReference ifNotNil: [ :aPage | 
		self snippetTitle: aPage title.
		self replaceContentWithPage: aPage.
		self update ]
]

{ #category : #'scripting opening' }
GTPlayground >> openOn: aPage [
	| window |
	window := super openOn: aPage.
	window extent: self class preferredExtent.
	window when: WindowResizing do: [ 
		self class setPreferredExtentIfWanted: window extent ].
	^ window
]

{ #category : #private }
GTPlayground >> replaceContentWithPage: aPage [

	GTPlayBook instance addPageIfInteresting: self entity.
	self entity: aPage 
]

{ #category : #actions }
GTPlayground >> resetBindings [

	^ self inspectorPresentation firstPresentation resetBindings
]

{ #category : #private }
GTPlayground >> saveAsCommand [

	(GTExternalPlayPage 
		externalPageForContent: self entity content
		withPossibleTitles: {self snippetTitle. self title}) ifNotNil: [ :aPage |
			self snippetTitle: aPage title.
			self replaceContentWithPage: aPage ]
]

{ #category : #actions }
GTPlayground >> setBindings: aDictionary [

	self inspectorPresentation firstPresentation 
		variableBindings: [ aDictionary associations ];
		updateVariableBindings
]

{ #category : #'accessing-dynamic' }
GTPlayground >> snippetPresentation [ 

	^ self inspectorPresentation firstPresentation
]

{ #category : #'accessing-dynamic' }
GTPlayground >> snippetTitle [

	^ self entity title
]

{ #category : #'accessing-dynamic' }
GTPlayground >> snippetTitle: aString [

	self entity title: aString
]

{ #category : #actions }
GTPlayground >> updateSnipetTitleTo: aString [

	self snippetTitle: aString.
	self update
]
